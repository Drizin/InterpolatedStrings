<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InterpolatedStrings</name>
    </assembly>
    <members>
        <member name="T:InterpolatedStrings.InterpolatedStringAdapter">
            <summary>
            Just a simple InterpolatedStringHandler that builds a <see cref="P:InterpolatedStrings.InterpolatedStringAdapter.InterpolatedStringBuilder"/> without requiring regex parsing.
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringAdapter.InterpolatedStringBuilder">
            <summary>
            Underlying Interpolated String
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringAdapter.#ctor(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringAdapter.#ctor(System.Int32,System.Int32,InterpolatedStrings.InterpolatedStringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringAdapter.#ctor(System.Int32,System.Int32,InterpolatedStrings.InterpolatedStringBuilderOptions)">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringAdapter.AppendLiteral(System.String)">
            <summary>
            Appends a literal string. 
            Curly braces will be automatically escaped depending on <see cref="P:InterpolatedStrings.InterpolatedStringBuilderOptions.AutoEscapeCurlyBraces"/>.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringAdapter.AppendFormatted``1(``0)">
            <summary>
            Appends the specified object.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringAdapter.AppendFormatted``1(``0,System.String)">
            <summary>
            Appends the specified object.
            </summary>
        </member>
        <member name="T:InterpolatedStrings.InterpolatedStringArgument">
            <summary>
            Interpolated string arguments are defined like this:  $"My string {arg}", $"My string {val:000}"
            InterpolatedStringArgument will hold both the arguments (like arg or val) in <see cref="P:InterpolatedStrings.InterpolatedStringArgument.Argument"/> 
            and if there's a format (after colon, like "000") it will be saved in <see cref="P:InterpolatedStrings.InterpolatedStringArgument.Format"/> (else it will be null).
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringArgument.Argument">
            <summary>
            Value of argument embedded into Interpolated String. Like <see cref="M:System.FormattableString.GetArguments"/>
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringArgument.Format">
            <summary>
            Each argument embedded into FormattableString may have a format specifier which will be kept here.
            If there's no format specified then this will be null.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringArgument.#ctor(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:InterpolatedStrings.InterpolatedStringArgumentComparer">
            <summary>
            Compares two arguments for reusing. Only used if <see cref="P:InterpolatedStrings.InterpolatedStringBuilderOptions.ReuseIdenticalParameters"/> is true.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringArgumentComparer.Equals(InterpolatedStrings.InterpolatedStringArgument,InterpolatedStrings.InterpolatedStringArgument)">
            <inheritdoc/>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringArgumentComparer.GetHashCode(InterpolatedStrings.InterpolatedStringArgument)">
            <inheritdoc/>
        </member>
        <member name="T:InterpolatedStrings.InterpolatedStringBuilder">
            <summary>
            InterpolatedStringBuilder is like a StringBuilder but for Interpolated Strings (FormattableString).
            It's an implementation of `FormattableString` with support for concatenating strings, replace, insert, etc.
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilder.Options">
            <inheritdoc cref="T:InterpolatedStrings.InterpolatedStringBuilderOptions"/>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilder.Format">
            <summary>
            For <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/> this is like <see cref="P:System.FormattableString.Format"/> which is the underlying format of the interpolated string.
            If you inherit and override the Append methods then this may have a different meaning.
            If you don't use indexed placeholders (numbered placeholders like "{0}", "{1}", etc.) you can set <see cref="P:InterpolatedStrings.InterpolatedStringBuilderOptions.AutoEscapeCurlyBraces"/> to false for better performance.
            </summary>
        </member>
        <member name="F:InterpolatedStrings.InterpolatedStringBuilder._cachedFormat">
            <summary>
            <see cref="P:InterpolatedStrings.InterpolatedStringBuilder.Format"/> uses <see cref="M:System.Text.StringBuilder.ToString"/> which is slow - this is a cache for faster reuse. Cache can be invalidated by setting it to null, so it gets recalculated when needed
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilder.Arguments">
            <summary>
            Like <see cref="M:System.FormattableString.GetArguments"/>
            </summary>
        </member>
        <member name="F:InterpolatedStrings.InterpolatedStringBuilder._arguments">
            <inheritdoc cref="P:InterpolatedStrings.InterpolatedStringBuilder.Arguments" />
        </member>
        <member name="F:InterpolatedStrings.InterpolatedStringBuilder._format">
            <inheritdoc cref="P:InterpolatedStrings.InterpolatedStringBuilder.Format" />
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilder.ArgumentCount">
            <summary>
            Like <see cref="P:System.FormattableString.ArgumentCount"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.GetArgument(System.Int32)">
            <summary>
            Like <see cref="M:System.FormattableString.GetArgument(System.Int32)"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.GetArgumentFormat(System.Int32)">
            <summary>
            Like <see cref="M:System.FormattableString.GetArgument(System.Int32)"/> but returning the Argument Format
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.GetArguments">
            <summary>
            Like <see cref="M:System.FormattableString.GetArguments"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.#ctor(InterpolatedStrings.InterpolatedStringBuilderOptions,System.Text.StringBuilder,System.Collections.Generic.List{InterpolatedStrings.InterpolatedStringArgument})">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.#ctor(InterpolatedStrings.InterpolatedStringBuilderOptions)">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.#ctor(System.FormattableString,InterpolatedStrings.InterpolatedStringBuilderOptions)">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.#ctor(System.Int32,System.Int32,InterpolatedStrings.InterpolatedStringBuilderOptions)">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AsFormattableString">
            <summary>
            Casts to a regular FormattableString
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Append(InterpolatedStrings.InterpolatedStringBuilder)">
            <summary>
            Appends to this instance another InterpolatedString.
            Underlying parameters will be appended (merged), and underlying formats will be concatenated (placeholder positions will be shifted to their new positions).
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AppendIf(System.Boolean,InterpolatedStrings.InterpolatedStringBuilder)">
            <summary>
            Appends to this instance another InterpolatedString, depending on a condition.
            Underlying parameters will be appended (merged), and underlying formats will be concatenated (placeholder positions will be shifted to their new positions).
            If condition is false, FormattableString will be parsed/evaluated but won't be appended.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.op_Addition(InterpolatedStrings.InterpolatedStringBuilder,InterpolatedStrings.InterpolatedStringBuilder)">
            <inheritdoc cref="M:InterpolatedStrings.InterpolatedStringBuilder.Append(InterpolatedStrings.InterpolatedStringBuilder)"/>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Append(System.FormattableString)">
            <summary>
            Appends to this instance another FormattableString.
            Uses regular expression for parsing the FormattableString.
            Underlying parameters will be appended (merged), and underlying formats will be concatenated (placeholder positions will be shifted to their new positions).
            If you're using net6.0+ please consider using <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.Append6(InterpolatedStrings.InterpolatedStringAdapter)"/> which can be a little faster than using regex.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AppendIf(System.Boolean,System.FormattableString)">
            <summary>
            Appends to this instance another FormattableString, depending on a condition.
            Uses regular expression for parsing the FormattableString.
            Underlying parameters will be appended (merged), and underlying formats will be concatenated (placeholder positions will be shifted to their new positions).
            If condition is false, FormattableString won't be parsed or appended.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.op_Addition(InterpolatedStrings.InterpolatedStringBuilder,System.FormattableString)">
            <inheritdoc cref="M:InterpolatedStrings.InterpolatedStringBuilder.Append(System.FormattableString)"/>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Append6(InterpolatedStrings.InterpolatedStringAdapter)">
            <summary>
            Appends to this instance another interpolated string.
            Uses InterpolatedStringHandler (net6.0+) which can be a little faster than using regex.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AppendIf6(System.Boolean,InterpolatedStrings.InterpolatedStringAdapter)">
            <summary>
            Appends to this instance another interpolated string, depending on a condition.
            Uses InterpolatedStringHandler (net6.0+) which can be a little faster than using regex.
            If condition is false, interpolated string won't be parsed or appended.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AppendLiteral(System.String)">
            <summary>
            Appends to this instance a literal string. 
            Curly braces will be automatically escaped depending on <see cref="P:InterpolatedStrings.InterpolatedStringBuilderOptions.AutoEscapeCurlyBraces"/>.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AppendLiteral(System.String,System.Int32,System.Int32)">
            <summary>
            Appends to this instance a substring as literal string.
            Curly braces will be automatically escaped depending on <see cref="P:InterpolatedStrings.InterpolatedStringBuilderOptions.AutoEscapeCurlyBraces"/>.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AppendRaw(System.String)">
            <summary>
            Appends a raw string. 
            This is like <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.AppendLiteral(System.String)"/> but it's a little faster since it does not escape curly-braces 
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Insert(System.Int32,InterpolatedStrings.InterpolatedStringBuilder)">
            <summary>
            Inserts another InterpolatedString at a specific position. Similar to <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.Append(InterpolatedStrings.InterpolatedStringBuilder)"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Insert(System.Int32,System.FormattableString)">
            <summary>
            Inserts another FormattableString at a specific position. Similar to <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.Append(System.FormattableString)"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Replace(System.String,InterpolatedStrings.InterpolatedStringBuilder)">
            <summary>
            Searches for a literal text in the InterpolatedString, and if found it will be replaced by another InterpolatedString (parameters will be merged, placeholder positions will be shifted).
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Replace(System.String,System.FormattableString)">
            <inheritdoc cref="M:InterpolatedStrings.InterpolatedStringBuilder.Replace(System.String,InterpolatedStrings.InterpolatedStringBuilder)"/>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.IndexOf(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the index of the start of the contents in a StringBuilder
            </summary>        
            <param name="value">The string to find</param>
            <param name="startIndex">The starting index.</param>
            <param name="ignoreCase">if set to <c>true</c> it will ignore case</param>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the specified range of characters from this instance.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AppendArgument(System.Object,System.String)">
            <summary>
            Appends an argument.
            This will both add the argument object to the list of arguments (see <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.AddArgument(InterpolatedStrings.InterpolatedStringArgument)"/>)
            and will also add the placeholder to the format StringBuilder (e.g. "{2}")
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.AddArgument(InterpolatedStrings.InterpolatedStringArgument)">
            <summary>
            Appends an argument and returns the index of the argument in the list <see cref="P:InterpolatedStrings.InterpolatedStringBuilder.Arguments"/>.
            This method will only add the argument object to the list of arguments - it will NOT add the placeholder to the format StringBuilder (e.g. "{2}").
            Appending parameters and adding them to the underlying StringBuilder is usually done by concatenating or (equivalent) by calling <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.AppendArgument(System.Object,System.String)"/>.
            If <see cref="P:InterpolatedStrings.InterpolatedStringBuilderOptions.ReuseIdenticalParameters"/> is true then this method will try to reuse existing parameters, according to 
            </summary>
            <returns>Position where parameter was added</returns>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringBuilder.ToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilder.DefaultOptions">
            <summary>
            Default options used when options is not defined in constructor
            </summary>
        </member>
        <member name="T:InterpolatedStrings.InterpolatedStringBuilderOptions">
            <summary>
            Settings for InterpolatedStringBuilder
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilderOptions.Parser">
            <summary>
            All <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/> methods that take a <see cref="T:System.FormattableString"/> will use this Parser to parse the FormattableString.
            By default it's <see cref="T:InterpolatedStrings.InterpolatedStringParser"/>
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilderOptions.AutoEscapeCurlyBraces">
            <summary>
            If true (default is true) then all curly braces are escaped (with double curly braces).
            By default <see cref="P:System.FormattableString.Format"/> uses indexed placeholders (numbered placeholders like "{0}", "{1}", etc.) to indicate the arguments,
            and so does <see cref="P:InterpolatedStrings.InterpolatedStringBuilder.Format"/>.
            If your derived type does NOT need those indexed placeholders (e.g. you're writing your own format and do not need the standard one) or
            if your derived type will never write curly braces through <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.AppendLiteral(System.String)"/>, 
            then you can disable this (set to false) so that it won't escape curly braces (and it will be faster).
            You can also use <see cref="M:InterpolatedStrings.InterpolatedStringBuilder.AppendRaw(System.String)"/>) which does not escape anything.
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilderOptions.PreserveArgumentFormatting">
            <summary>
            Argument Formatting (what comes after colon, like $"My string {val:000}") is always extracted into <see cref="P:InterpolatedStrings.InterpolatedStringArgument.Format"/>.
            If this is true (default is true) then this formatting will also be preserved in the underlying <see cref="P:InterpolatedStrings.InterpolatedStringBuilder.Format"/>
            (else, <see cref="P:InterpolatedStrings.InterpolatedStringBuilder.Format"/> will only have the numeric placeholder like {0} but without the extracted formatting).
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilderOptions.ReuseIdenticalParameters">
            <summary>
            If true (default is false) each added parameter will check if identical parameter (same type and value)
            was already added, and if so will reuse the existing parameter.
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringBuilderOptions.ArgumentComparer">
            <summary>
            Compares two arguments for reusing. Only used if <see cref="P:InterpolatedStrings.InterpolatedStringBuilderOptions.ReuseIdenticalParameters"/> is true.
            By default it's <see cref="T:InterpolatedStrings.InterpolatedStringArgumentComparer"/>
            </summary>
        </member>
        <member name="T:InterpolatedStrings.InterpolatedStringFactory">
            <summary>
            Creates <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringFactory.Create6(InterpolatedStrings.InterpolatedStringAdapter)">
            <summary>
            Creates a new InterpolatedStringBuilder using an InterpolatedStringHandler (net6.0+) which can be a little faster than using regex.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringFactory.Create6(InterpolatedStrings.InterpolatedStringAdapter,InterpolatedStrings.InterpolatedStringBuilderOptions)">
            <summary>
            Creates a new InterpolatedStringBuilder using an InterpolatedStringHandler (net6.0+) which can be a little faster than using regex.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringFactory.Create(System.FormattableString)">
            <summary>
            Creates a new InterpolatedStringBuilder using regular expression for parsing the FormattableString. 
            If you're using net6.0+ please consider using <see cref="M:InterpolatedStrings.InterpolatedStringFactory.Create6(InterpolatedStrings.InterpolatedStringAdapter)"/> which can be a little faster than using regex.
            </summary>
        </member>
        <member name="F:InterpolatedStrings.InterpolatedStringFactory.Parser">
            <summary>
            Default Parser
            </summary>
        </member>
        <member name="F:InterpolatedStrings.InterpolatedStringFactory.Default">
            <summary>
            Default Factory
            </summary>
        </member>
        <member name="T:InterpolatedStrings.IInterpolatedStringParser">
            <summary>
            Parses FormattableString into <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/> using regex.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.IInterpolatedStringParser.ParseAppend(System.FormattableString,InterpolatedStrings.InterpolatedStringBuilder)">
            <summary>
            Parses a FormattableString and Appends it to an existing <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.IInterpolatedStringParser.ShiftPlaceholderPositions(System.Text.StringBuilder,System.Int32)">
            <summary>
            When a FormattableString is appended to an existing InterpolatedString, 
            the underlying format (where there are numeric placeholders) needs to be shifted because the arguments will have new positions in the final array
            This method is used to shift a format by a number of positions.
            </summary>
        </member>
        <member name="T:InterpolatedStrings.InterpolatedStringParser">
            <summary>
            Parses FormattableString into <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/>
            </summary>
        </member>
        <member name="F:InterpolatedStrings.InterpolatedStringParser._formattableArgumentRegex">
            <summary>
            Regex to parse FormattableString
            </summary>
        </member>
        <member name="F:InterpolatedStrings.InterpolatedStringParser._lineBreaksRegex">
            <summary>
            Identify all types of line-breaks
            </summary>
        </member>
        <member name="P:InterpolatedStrings.InterpolatedStringParser.AutoAdjustMultilineString">
            <summary>
            This is for legacy compatibility - it adjusts blocks similarly to what is currently available with C#11 Raw String Literals
            <see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-11.0/raw-string-literal" />
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.#ctor">
            <inheritdoc />
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.ParseAppend6(InterpolatedStrings.InterpolatedStringAdapter,InterpolatedStrings.InterpolatedStringBuilder)">
            <summary>
            Parses a FormattableString (using <see cref="T:InterpolatedStrings.InterpolatedStringAdapter"/> handler) and Appends it to an existing <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/>.
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.ParseAppend(System.FormattableString,InterpolatedStrings.InterpolatedStringBuilder)">
            <summary>
            Parses a FormattableString and Appends it to an existing <see cref="T:InterpolatedStrings.InterpolatedStringBuilder"/>
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.AppendLiteral(InterpolatedStrings.InterpolatedStringBuilder,System.String,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.AppendArgument(InterpolatedStrings.InterpolatedStringBuilder,System.Object,System.String)">
            <summary></summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.ShiftPlaceholderPositions(System.Text.StringBuilder,System.Int32)">
            <inheritdoc cref="M:InterpolatedStrings.IInterpolatedStringParser.ShiftPlaceholderPositions(System.Text.StringBuilder,System.Int32)"/>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.ReplacePlaceholderPosition(System.Text.RegularExpressions.Match,System.Int32)">
            <summary>
            When a FormattableString is appended to an existing InterpolatedString, 
            the underlying format (where there are numeric placeholders) needs to be shifted because the arguments will have new positions in the final array
            </summary>
        </member>
        <member name="M:InterpolatedStrings.InterpolatedStringParser.AdjustMultilineString(System.String)">
            <summary>
            Given a text block (multiple lines), this removes the left padding of the block, by calculating the minimum number of spaces which happens in EVERY line.
            Then, other methods writes the lines one by one, which in case will respect the current indent of the writer.
            This is legacy (backwards compatibility), but new code should just use C# Raw String Literals which will do the same (remove block indentation and first empty line)
            </summary>
        </member>
    </members>
</doc>
